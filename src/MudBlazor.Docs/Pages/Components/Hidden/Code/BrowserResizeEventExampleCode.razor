@* Auto-generated markup. Any changes will be overwritten *@
@namespace MudBlazor.Docs.Examples.Markup
<div class="mud-codeblock">
<div class="html"><pre>
<span class="atSign">&#64;</span>using MudBlazor.Services

<span class="htmlTagDelimiter">&lt;</span><span class="htmlElementName">MudCard</span> <span class="htmlAttributeName">Class</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="htmlAttributeValue">pa-5</span><span class="quot">&quot;</span><span class="htmlTagDelimiter">&gt;</span>
    <span class="htmlTagDelimiter">&lt;</span><span class="htmlElementName">MudText</span><span class="htmlTagDelimiter">&gt;</span>Resize the window and see width and height change:<span class="htmlTagDelimiter">&lt;</span><span class="htmlElementName">br</span> <span class="htmlTagDelimiter">/&gt;</span> 
        Browser window is <span class="atSign">&#64;</span>(width)x<span class="atSign">&#64;</span>(height)px<span class="htmlTagDelimiter">&lt;/</span><span class="htmlElementName">MudText</span><span class="htmlTagDelimiter">&gt;</span>
<span class="htmlTagDelimiter">&lt;/</span><span class="htmlElementName">MudCard</span><span class="htmlTagDelimiter">&gt;</span>
</pre></div>
<div class="csharp"><pre>
<span class="atSign">&#64;</span>code
{
    [Inject] IResizeListenerService ResizeListener { <span class="keyword">get</span>; <span class="keyword">set</span>; }

    <span class="keyword">int</span> width = <span class="number">0</span>;
    <span class="keyword">int</span> height = <span class="number">0</span>;

    <span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">async</span> Task OnInitializedAsync()
    {
        <span class="keyword">await</span> <span class="keyword">base</span>.OnInitializedAsync();
    }

    <span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">async</span> Task OnAfterRenderAsync(<span class="keyword">bool</span> firstRender)
    {
        <span class="keyword">if</span> (firstRender)
        {
            ResizeListener.OnResized += OnResized;
        }
        <span class="keyword">var</span> size = <span class="keyword">await</span> ResizeListener.GetBrowserWindowSize();
        height = size.Height;
        width = size.Width;
        <span class="keyword">await</span> <span class="keyword">base</span>.OnAfterRenderAsync(firstRender);
    }

    <span class="keyword">private</span> <span class="keyword">void</span> OnResized(<span class="keyword">object</span> sender, BrowserWindowSize size)
    {
        width = size.Width;
        height = size.Height;
        InvokeAsync(StateHasChanged);
    }
}
</pre></div>
</div>
