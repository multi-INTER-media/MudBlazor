@page "/components/form"


<DocsPage>
    <DocsPageHeader Title="Form Validation" SubTitle="All about checking user input and visualization of errors" />
    <DocsPageContent>

        <DocsPageSection>
            <SectionHeader>
                <Title>Manual validation</Title>
                <Description>
                    Before we take a look at the form validation frameworks below let's do it manually. You can set the Error state of any input component which will show the ErrorText which you can also set manually.
                    You don't necessarily want to do that for large forms but it might be good to know that you have this option. Compare this against the methods below to see their merits.
                </Description>
            </SectionHeader>
            <SectionContent DarkenBackground="true">
                <MudContainer>
                    <ManualValidationExample />
                </MudContainer>
            </SectionContent>
            <SectionSource ShowCode="false" Code="ManualValidationExample" GitHubFolderName="Form" />
        </DocsPageSection>

        <DocsPageSection>
            <SectionHeader>
                <Title>Simple form validation</Title>
                <Description>
                    When you use <CodeInline>MudForm</CodeInline>, you can pass your own validation functions directly into the <CodeInline>Validation</CodeInline> parameter of your input controls.
                    But, if you want to use data annotation attributes, you can pass them into <CodeInline>Validation</CodeInline> also. <br />
                    MudForm is designed to be easy and simple but if you rather use EditForm we support that too.
                    Note: for MudForm, do NOT use a button with <CodeInline>ButtonType="ButtonType.Submit"</CodeInline>
                </Description>
            </SectionHeader>
            <SectionContent DarkenBackground="true">
                <MudContainer>
                    <MudFormExample />
                </MudContainer>
            </SectionContent>
            <SectionSource ShowCode="false" Code="MudFormExample" GitHubFolderName="Form" />
        </DocsPageSection>

        <DocsPageSection>
            <SectionHeader>
                <Title>EditForm</Title>
                <Description>
                    In Blazor form validation can be done using <MudLink Href="https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation?view=aspnetcore-3.1">data annotations</MudLink>. MudBlazor's input components support
                    Blazor's form validation if you put them into a <CodeInline>&lt;EditForm&gt;</CodeInline>. The following example shows a very simple use case. If you want to learn more please check out
                    <MudLink Href="https://docs.microsoft.com/en-us/aspnet/core/blazor/forms-validation?view=aspnetcore-3.1">ASP.NET Core Blazor forms and validation</MudLink> on the official Blazor documentation.
                    <br /><br />
                    Note: for EditForm validation to work make sure to set <CodeInline>ButtonType="ButtonType.Submit"</CodeInline> and do not use a MudForm.
                    Note: do NOT set <CodeInline>Error</CodeInline> or <CodeInline>ErrorText</CodeInline> because they would overwrite the state and error message generated by the data annotations.
                </Description>
            </SectionHeader>
            <SectionContent DarkenBackground="true">
                <MudContainer>
                    <EditFormExample />
                </MudContainer>
            </SectionContent>
            <SectionSource ShowCode="false" Code="EditFormExample" GitHubFolderName="Form" />
        </DocsPageSection>
    </DocsPageContent>
</DocsPage>

