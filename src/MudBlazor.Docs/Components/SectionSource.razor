@using MudBlazor.Utilities

@inject IJSRuntime JSRuntime

<div class="docs-section-source @Class">
    @if (!NoToolbar)
    {
    <div class="docs-content-toolbar">
        <div class="flex-grow-1"></div>
        <MudTooltip Text="@TooltipSourceCodeText" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Material.Code" OnClick="OnShowCode" />
        </MudTooltip>
        @if (!String.IsNullOrEmpty(SnippetId))
        {
            <MudTooltip Text="Edit on TryMudBlazor" Placement="Placement.Top">
                <MudIconButton Icon="@Icons.Material.Create" Link="@TryMudBlazorSnippetLink" Target="_blank" />
            </MudTooltip>
        }
        @if (!String.IsNullOrEmpty(Code))
        {
            <MudTooltip Text="Copy Code" Placement="Placement.Top">
                <MudIconButton Icon="@Icons.Material.FileCopy" @onclick="CopyTextToClipboard" />
            </MudTooltip>
        }

        @if (!String.IsNullOrEmpty(GitHubFolderName))
        {
            <MudTooltip Text="View the source on GitHub" Placement="Placement.Top">
                <MudIconButton Icon="@Icons.Custom.GitHub" Link="@GitHubSourceCode" Target="_blank" />
            </MudTooltip>
        }
    </div>
    }

    <div class="docs-source-code @(ShowCode? "docs-show-code" : "docs-hide-code")">
        @CodeComponent()
    </div>
    @if (!String.IsNullOrEmpty(FullCode))
    {
        <div class="docs-source-code @(ShowFullCode? "docs-show-code" : "docs-hide-code")">
            @FullCodeComponent()
        </div>
    }
</div>

@code {

    [Parameter] public string Code { get; set; }

    [Parameter] public string FullCode { get; set; }

    [Parameter] public string Class { get; set; }

    [Parameter] public string GitHubFolderName { get; set; }

    [Parameter] public string SnippetId { get; set; }

    [Parameter] public bool ShowCode { get; set; } = true;

    [Parameter] public bool NoToolbar { get; set; }

    private string GitHubSourceCode { get; set; }

    private string TryMudBlazorSnippetLink { get; set; }

    public string TooltipSourceCodeText { get; set; }

    private bool ShowFullCode;

    private string showCodeExampleString { get; set; } = "Show code example";
    private string hideCodeExampleString { get; set; } = "Hide code example";
    private string showComponentCodeExampleString { get; set; } = "Show component code example";
    private string hideComponentCodeExampleString { get; set; } = "Hide component code example";

    private async Task CopyTextToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", @Snippets.GetCode(Code));
    }

    public void OnShowCode()
    {
        if (!String.IsNullOrEmpty(Code) && String.IsNullOrEmpty(FullCode))
        {
            ShowCode = !ShowCode;
            if (ShowCode)
            {
                TooltipSourceCodeText = hideCodeExampleString;
            }
            else
            {
                TooltipSourceCodeText = showCodeExampleString;
            }
        }
        if (!String.IsNullOrEmpty(Code) && !String.IsNullOrEmpty(FullCode))
        {
            ShowCode = !ShowCode;
            ShowFullCode = !ShowFullCode;
            if (ShowFullCode)
            {
                TooltipSourceCodeText = hideComponentCodeExampleString;
            }
            else
            {
                TooltipSourceCodeText = showComponentCodeExampleString;
            }
        }
    }

    private Type CodeType => Type.GetType("MudBlazor.Docs.Examples.Markup." + Code + "Code");
    private Type FullCodeType => Type.GetType("MudBlazor.Docs.Examples.Markup." + FullCode + "Code");

    RenderFragment CodeComponent() => builder =>
    {
        try
        {
            builder.OpenComponent(0, CodeType);
            builder.CloseComponent();
        }
        catch (Exception e)
        {
            // todo: log this
        }
    };

    RenderFragment FullCodeComponent() => builder =>
    {
        try
        {
            builder.OpenComponent(0, FullCodeType);
            builder.CloseComponent();
        }
        catch (Exception e)
        {
        // todo: log this
        }
    };

    protected override void OnInitialized()
    {
        if (!String.IsNullOrEmpty(SnippetId))
        {
            string TryMudBlazorLink = "https://try.mudblazor.com/";
            TryMudBlazorSnippetLink = $"{TryMudBlazorLink}snippet/{SnippetId}";
        }
        if (!String.IsNullOrEmpty(GitHubFolderName))
        {
            string GitHubLink = "https://github.com/";
            GitHubSourceCode = $"{GitHubLink}Garderoben/MudBlazor/blob/master/src/MudBlazor.Docs/Pages/Components/{GitHubFolderName}/Examples/{Code}.razor";
        }
        if (ShowCode)
        {
            TooltipSourceCodeText = hideCodeExampleString;
        }
        else
        {
            TooltipSourceCodeText = showCodeExampleString;
        }
        if (!String.IsNullOrEmpty(FullCode))
        {
            if (ShowFullCode)
            {
                TooltipSourceCodeText = hideComponentCodeExampleString;

            }
            else
            {
                TooltipSourceCodeText = showComponentCodeExampleString;
            }
        }
    }
}